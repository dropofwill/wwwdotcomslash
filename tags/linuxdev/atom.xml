<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title> - LinuxDev</title>
    <link href="https://will-paul.com/wwwdotcomslash/tags/linuxdev/atom.xml" rel="self" type="application/atom+xml"/>
    <link href="https://will-paul.com/wwwdotcomslash"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2015-05-19T14:31:00+00:00</updated>
    <id>https://will-paul.com/wwwdotcomslash/tags/linuxdev/atom.xml</id>
    <entry xml:lang="en">
        <title>rtasklib first release</title>
        <published>2015-05-19T14:31:00+00:00</published>
        <updated>2015-05-19T14:31:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://will-paul.com/wwwdotcomslash/posts/rtasklib-first-release/" type="text/html"/>
        <id>https://will-paul.com/wwwdotcomslash/posts/rtasklib-first-release/</id>
        
        <summary type="html">&lt;p&gt;So the semester has come to a close and I&#x27;ve made the first &#x27;official&#x27; release of &lt;code&gt;rtasklib&lt;&#x2F;code&gt;. Install the gem &lt;a href=&quot;https:&#x2F;&#x2F;rubygems.org&#x2F;gems&#x2F;rtasklib&quot;&gt;from RubyGems.org&lt;&#x2F;a&gt; (&lt;code&gt;gem install rtasklib&lt;&#x2F;code&gt;) or &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;dropofwill&#x2F;rtasklib&#x2F;tree&#x2F;master&#x2F;rpms&quot;&gt;install the RPM on your Fedora system if you prefer&lt;&#x2F;a&gt;. I reached out to the TaskWarrior devs and they also are adding &lt;code&gt;rtasklib&lt;&#x2F;code&gt; to the list of &lt;a href=&quot;http:&#x2F;&#x2F;taskwarrior.org&#x2F;tools&#x2F;#libraries&quot;&gt;available libraries on the TaskWarrior main website in the next few days&lt;&#x2F;a&gt;, which is pretty cool.&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Packaging Ruby gems</title>
        <published>2015-05-10T15:46:00+00:00</published>
        <updated>2015-05-10T15:46:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://will-paul.com/wwwdotcomslash/posts/packaging-ruby-gems/" type="text/html"/>
        <id>https://will-paul.com/wwwdotcomslash/posts/packaging-ruby-gems/</id>
        
        <summary type="html">&lt;p&gt;In the Ruby community the most common way to distribute software is in a packaged format cutely named gems (similar to the Python concept of Eggs). This manages dependencies and meta data much like the other packaging platforms, but with Ruby syntax in a file called &#x27;#{you_gems_name}.gemspec&#x27;. This process is completely automated through the Ruby gems, &lt;code&gt;gem&lt;&#x2F;code&gt; (installation&#x2F;RubyGems.org integration), &lt;code&gt;bundler&lt;&#x2F;code&gt; (dependency management and boiler plate code), and &lt;code&gt;rake&lt;&#x2F;code&gt; (Ruby make, to streamline the process).&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>rtasklib update</title>
        <published>2015-04-20T14:36:00+00:00</published>
        <updated>2015-04-20T14:36:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://will-paul.com/wwwdotcomslash/posts/rtasklib-update/" type="text/html"/>
        <id>https://will-paul.com/wwwdotcomslash/posts/rtasklib-update/</id>
        
        <summary type="html">&lt;p&gt;In the Ruby world the most common way to generate documentation is with &lt;a href=&quot;http:&#x2F;&#x2F;yardoc.org&quot;&gt;Yardocs&lt;&#x2F;a&gt;. It basically generates documentation by scraping the code comments and provides a structured API for writing comments that it can interpret. For example to annotate that a parameter of a certain method is a duck type that responds to &lt;code&gt;#to_s&lt;&#x2F;code&gt; (to string), you would simply make a comment above the method definition that says: &lt;code&gt;# @param parameter_name [#to_s] a parameter that responds to #to_s&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>rtasklib update = Ruby and external tools</title>
        <published>2015-04-06T02:22:00+00:00</published>
        <updated>2015-04-06T02:22:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://will-paul.com/wwwdotcomslash/posts/rtasklib-update-ruby-and-external-tools/" type="text/html"/>
        <id>https://will-paul.com/wwwdotcomslash/posts/rtasklib-update-ruby-and-external-tools/</id>
        
        <summary type="html">&lt;p&gt;It turns out that one of the reasons Ruby was popular before the advent of Rails was because it was so easy to integrate with 3rd party tools through subprocesses. In fact Ruby has at least 7 ways of executing processes either in the core or the standard libraries and many more user implemented varieties. Since &lt;code&gt;rtasklib&lt;&#x2F;code&gt; is at its core concerned with interacting with a subprocess having a solid understanding of the available options is important. Below I summarize the results of my research for several of Ruby&#x27;s subprocess methods.&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>rtasklib update march 16th</title>
        <published>2015-03-16T04:02:00+00:00</published>
        <updated>2015-03-16T04:02:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://will-paul.com/wwwdotcomslash/posts/rtasklib-update-march-16th/" type="text/html"/>
        <id>https://will-paul.com/wwwdotcomslash/posts/rtasklib-update-march-16th/</id>
        
        <summary type="html">&lt;p&gt;Over the last couple of weeks the overall architecture has been in a state of flux as I have been swapping pieces in out to see what will work best. Now as I approach my original milestone for having this in a working condition things are starting to fall into place. Models for tasks and configuration are pretty much stable, initialization of the configuration is done, and validation and serialization of tasks are coming along. The main bit of work left to do is writing the controllers to hook all of the components together and will effectively make up the public interface for the library.&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>task_time and rtasklib updates March 8th</title>
        <published>2015-03-09T01:10:00+00:00</published>
        <updated>2015-03-09T01:10:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://will-paul.com/wwwdotcomslash/posts/task-time-and-rtasklib-updates-march-8th/" type="text/html"/>
        <id>https://will-paul.com/wwwdotcomslash/posts/task-time-and-rtasklib-updates-march-8th/</id>
        
        <summary type="html">&lt;p&gt;Last week I talked about how all existing &lt;code&gt;TaskWarrior&lt;&#x2F;code&gt; wrappers were not going to satisfy the requirements for &lt;code&gt;task_time&lt;&#x2F;code&gt;, so I decided to roll my own Ruby wrapper &lt;code&gt;rtasklib&lt;&#x2F;code&gt; and started working on the JSON to domain object marshalling and vice versa. I realized that I was reinventing the wheel a bit with the domain objects and to some extent with the data type coercions (though obviously some custom coercions will be necessary).&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>task_time update March 1st</title>
        <published>2015-03-02T02:16:00+00:00</published>
        <updated>2015-03-02T02:16:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://will-paul.com/wwwdotcomslash/posts/task-time-update-march-1st/" type="text/html"/>
        <id>https://will-paul.com/wwwdotcomslash/posts/task-time-update-march-1st/</id>
        
        <summary type="html">&lt;p&gt;&lt;a href=&quot;&#x2F;2015&#x2F;02&#x2F;22&#x2F;a-comparison-of-task-warrior-wrappers.html.markdown&quot;&gt;Last week&lt;&#x2F;a&gt; I talked about picking an appropriate TaskWarrior wrapper for my &lt;code&gt;task_time&lt;&#x2F;code&gt; project. A rundown of the options are &lt;code&gt;taskw&lt;&#x2F;code&gt; (Python, GPL, low on documentation, durations not implemented yet), &lt;code&gt;tasklib&lt;&#x2F;code&gt; (Python, BSD, good documentation, durations not implemented, does not read in users &lt;code&gt;.taskrc&lt;&#x2F;code&gt;), and &lt;code&gt;taskwarrior&lt;&#x2F;code&gt; (Ruby, MIT, just does JSON marshalling&#x2F;unmarshalling). In the end I decided none of these were actually going to cut it, since none implemented duration features, so my choices were to either Fork and implement durations and whatever other features were needed or to roll my own. In the end I really would rather use Ruby for this so I decided that it would be good to write the wrapper from scratch, while taking cues from each of the other implementations. I named the repo &lt;code&gt;rtasklib&lt;&#x2F;code&gt; in following with the ruby convention of naming wrappers with lib and either a leading &lt;code&gt;r&lt;&#x2F;code&gt; or trailing &lt;code&gt;_ruby&lt;&#x2F;code&gt; (dashes imply a subclass and are only used when your&#x27;re gem extends an existing gem not an external program). You can find the repo at &lt;a href=&quot;http:&#x2F;&#x2F;github.com&#x2F;dropofwill&#x2F;rtasklib&quot;&gt;&lt;code&gt;dropofwill&#x2F;rtasklib&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; and the &lt;code&gt;task_time&lt;&#x2F;code&gt; repo at &lt;a href=&quot;http:&#x2F;&#x2F;github.com&#x2F;dropofwill&#x2F;task_time&quot;&gt;dropofwill&#x2F;task_time&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>A Comparison of Task Warrior Wrappers</title>
        <published>2015-02-22T20:54:00+00:00</published>
        <updated>2015-02-22T20:54:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://will-paul.com/wwwdotcomslash/posts/a-comparison-of-task-warrior-wrappers/" type="text/html"/>
        <id>https://will-paul.com/wwwdotcomslash/posts/a-comparison-of-task-warrior-wrappers/</id>
        
        <summary type="html">&lt;p&gt;So as it turns out there were 3 main libraries written to interact with the TaskWarrior database (I think there is also a Perl and maybe a PHP wrapper as well, but I couldn&#x27;t find them again and let&#x27;s face it: I&#x27;m not interested in using either of those languages anyways).&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Taskwarrior timesheet plugin plan</title>
        <published>2015-02-16T19:36:00+00:00</published>
        <updated>2015-02-16T19:36:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://will-paul.com/wwwdotcomslash/posts/taskwarrior-timesheet-plugin-plan/" type="text/html"/>
        <id>https://will-paul.com/wwwdotcomslash/posts/taskwarrior-timesheet-plugin-plan/</id>
        
        <summary type="html">&lt;p&gt;This is a plan for a project that will act as a plugin for the application Taskwarrior that allows the users to use &lt;code&gt;task&lt;&#x2F;code&gt; to keep track of their time involved with tasks. I chose task_time as the name because the original program is run with the &lt;code&gt;task&lt;&#x2F;code&gt; command and in Ruby underscores are used to denote spaces (dashes imply some sort of class hierarchy).&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Writing Command Line Tools with Ruby</title>
        <published>2015-02-13T17:16:00+00:00</published>
        <updated>2015-02-13T17:16:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://will-paul.com/wwwdotcomslash/posts/commnad-line-tools-with-ruby/" type="text/html"/>
        <id>https://will-paul.com/wwwdotcomslash/posts/commnad-line-tools-with-ruby/</id>
        
        <summary type="html">&lt;p&gt;I&#x27;ve written a lot of Ruby code over the years from web applications, to rack frameworks, to rake tasks, even packaged a few up as gems, but one thing I&#x27;ve never done is write a command line tool directly in ruby. This post just sums up my initial foray into making Ruby cli tools, as usual with Ruby it&#x27;s not nearly as hard as it sounds.&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Initial thoughts for an MPD project</title>
        <published>2015-02-05T21:30:00+00:00</published>
        <updated>2015-02-05T21:30:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://will-paul.com/wwwdotcomslash/posts/source-code-review-of-mpd-and-mpd-wrappers/" type="text/html"/>
        <id>https://will-paul.com/wwwdotcomslash/posts/source-code-review-of-mpd-and-mpd-wrappers/</id>
        
        <summary type="html">&lt;p&gt;For my Software Development in Linux class we are making one large project over the course of the class and then packaging it up for distribution at the end (probably Debian, RPM, and AUR).  This is a little bit of a paradigm shift for me personally, as for most of my projects distribution means pushing to a Heroku instance, so I&#x27;ve had to brain storm some new non-web-based projects. I&#x27;ve come up with two basic trains of thought either a better time-tracking&#x2F;Freshbooks integration for taskwarrior (the current ones are all bare-bones) or any number of music&#x2F;analytics ideas for the music players, specifically MPD.&lt;&#x2F;p&gt;
</summary>
        
    </entry>
</feed>
