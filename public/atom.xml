<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title></title>
    <link rel="self" type="application/atom+xml" href="https://will-paul.com/wwwdotcomslash/atom.xml"/>
    <link rel="alternate" type="text/html" href="https://will-paul.com/wwwdotcomslash"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2015-05-20T02:04:00+00:00</updated>
    <id>https://will-paul.com/wwwdotcomslash/atom.xml</id>
    <entry xml:lang="en">
        <title>A Scanner Orderly: The smart coaster</title>
        <published>2015-05-20T02:04:00+00:00</published>
        <updated>2015-05-20T02:04:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://will-paul.com/wwwdotcomslash/posts/a-scanner-orderly-the-smart-coaster/"/>
        <id>https://will-paul.com/wwwdotcomslash/posts/a-scanner-orderly-the-smart-coaster/</id>
        
        <summary type="html">&lt;p&gt;What if you could order drink with your coaster? This blog post explains how we made one using an Arduino and Node.js.&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>rtasklib first release</title>
        <published>2015-05-19T14:31:00+00:00</published>
        <updated>2015-05-19T14:31:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://will-paul.com/wwwdotcomslash/posts/rtasklib-first-release/"/>
        <id>https://will-paul.com/wwwdotcomslash/posts/rtasklib-first-release/</id>
        
        <summary type="html">&lt;p&gt;So the semester has come to a close and I&#x27;ve made the first &#x27;official&#x27; release of &lt;code&gt;rtasklib&lt;&#x2F;code&gt;. Install the gem &lt;a href=&quot;https:&#x2F;&#x2F;rubygems.org&#x2F;gems&#x2F;rtasklib&quot;&gt;from RubyGems.org&lt;&#x2F;a&gt; (&lt;code&gt;gem install rtasklib&lt;&#x2F;code&gt;) or &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;dropofwill&#x2F;rtasklib&#x2F;tree&#x2F;master&#x2F;rpms&quot;&gt;install the RPM on your Fedora system if you prefer&lt;&#x2F;a&gt;. I reached out to the TaskWarrior devs and they also are adding &lt;code&gt;rtasklib&lt;&#x2F;code&gt; to the list of &lt;a href=&quot;http:&#x2F;&#x2F;taskwarrior.org&#x2F;tools&#x2F;#libraries&quot;&gt;available libraries on the TaskWarrior main website in the next few days&lt;&#x2F;a&gt;, which is pretty cool.&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Packaging Ruby gems</title>
        <published>2015-05-10T15:46:00+00:00</published>
        <updated>2015-05-10T15:46:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://will-paul.com/wwwdotcomslash/posts/packaging-ruby-gems/"/>
        <id>https://will-paul.com/wwwdotcomslash/posts/packaging-ruby-gems/</id>
        
        <summary type="html">&lt;p&gt;In the Ruby community the most common way to distribute software is in a packaged format cutely named gems (similar to the Python concept of Eggs). This manages dependencies and meta data much like the other packaging platforms, but with Ruby syntax in a file called &#x27;#{you_gems_name}.gemspec&#x27;. This process is completely automated through the Ruby gems, &lt;code&gt;gem&lt;&#x2F;code&gt; (installation&#x2F;RubyGems.org integration), &lt;code&gt;bundler&lt;&#x2F;code&gt; (dependency management and boiler plate code), and &lt;code&gt;rake&lt;&#x2F;code&gt; (Ruby make, to streamline the process).&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>rtasklib update</title>
        <published>2015-04-20T14:36:00+00:00</published>
        <updated>2015-04-20T14:36:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://will-paul.com/wwwdotcomslash/posts/rtasklib-update/"/>
        <id>https://will-paul.com/wwwdotcomslash/posts/rtasklib-update/</id>
        
        <summary type="html">&lt;p&gt;In the Ruby world the most common way to generate documentation is with &lt;a href=&quot;http:&#x2F;&#x2F;yardoc.org&quot;&gt;Yardocs&lt;&#x2F;a&gt;. It basically generates documentation by scraping the code comments and provides a structured API for writing comments that it can interpret. For example to annotate that a parameter of a certain method is a duck type that responds to &lt;code&gt;#to_s&lt;&#x2F;code&gt; (to string), you would simply make a comment above the method definition that says: &lt;code&gt;# @param parameter_name [#to_s] a parameter that responds to #to_s&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Playing power chords on an Arduino</title>
        <published>2015-04-14T01:13:00+00:00</published>
        <updated>2015-04-14T01:13:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://will-paul.com/wwwdotcomslash/posts/playing-power-chords-on-an-arduino/"/>
        <id>https://will-paul.com/wwwdotcomslash/posts/playing-power-chords-on-an-arduino/</id>
        
        <summary type="html">&lt;p&gt;Play power chords with an Arduino, capacitive touch pads, and a couple of speakers.&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>rtasklib update = Ruby and external tools</title>
        <published>2015-04-06T02:22:00+00:00</published>
        <updated>2015-04-06T02:22:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://will-paul.com/wwwdotcomslash/posts/rtasklib-update-ruby-and-external-tools/"/>
        <id>https://will-paul.com/wwwdotcomslash/posts/rtasklib-update-ruby-and-external-tools/</id>
        
        <summary type="html">&lt;p&gt;It turns out that one of the reasons Ruby was popular before the advent of Rails was because it was so easy to integrate with 3rd party tools through subprocesses. In fact Ruby has at least 7 ways of executing processes either in the core or the standard libraries and many more user implemented varieties. Since &lt;code&gt;rtasklib&lt;&#x2F;code&gt; is at its core concerned with interacting with a subprocess having a solid understanding of the available options is important. Below I summarize the results of my research for several of Ruby&#x27;s subprocess methods.&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Mouse Rat: Technical explanation</title>
        <published>2015-03-28T18:37:00+00:00</published>
        <updated>2015-03-28T18:37:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://will-paul.com/wwwdotcomslash/posts/mouse-rat-technical-explanation/"/>
        <id>https://will-paul.com/wwwdotcomslash/posts/mouse-rat-technical-explanation/</id>
        
        <summary type="html">&lt;p&gt;Technical explanation for a wearable gesture based mouse glove. It used the Arduino Flora, the wearable LSM9DSO accelerometer, and MPR121 capacitive touch breakout, all from Adafruit.&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Mouse Rat: Rethinking the mouse computer interface</title>
        <published>2015-03-28T18:36:00+00:00</published>
        <updated>2015-03-28T18:36:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://will-paul.com/wwwdotcomslash/posts/mouse-rat-rethinking-the-mouse-computer-interface/"/>
        <id>https://will-paul.com/wwwdotcomslash/posts/mouse-rat-rethinking-the-mouse-computer-interface/</id>
        
        <summary type="html">&lt;p&gt;Design exploration for a wearable gesture based mouse glove.&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>rtasklib update march 16th</title>
        <published>2015-03-16T04:02:00+00:00</published>
        <updated>2015-03-16T04:02:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://will-paul.com/wwwdotcomslash/posts/rtasklib-update-march-16th/"/>
        <id>https://will-paul.com/wwwdotcomslash/posts/rtasklib-update-march-16th/</id>
        
        <summary type="html">&lt;p&gt;Over the last couple of weeks the overall architecture has been in a state of flux as I have been swapping pieces in out to see what will work best. Now as I approach my original milestone for having this in a working condition things are starting to fall into place. Models for tasks and configuration are pretty much stable, initialization of the configuration is done, and validation and serialization of tasks are coming along. The main bit of work left to do is writing the controllers to hook all of the components together and will effectively make up the public interface for the library.&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>task_time and rtasklib updates March 8th</title>
        <published>2015-03-09T01:10:00+00:00</published>
        <updated>2015-03-09T01:10:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://will-paul.com/wwwdotcomslash/posts/task-time-and-rtasklib-updates-march-8th/"/>
        <id>https://will-paul.com/wwwdotcomslash/posts/task-time-and-rtasklib-updates-march-8th/</id>
        
        <summary type="html">&lt;p&gt;Last week I talked about how all existing &lt;code&gt;TaskWarrior&lt;&#x2F;code&gt; wrappers were not going to satisfy the requirements for &lt;code&gt;task_time&lt;&#x2F;code&gt;, so I decided to roll my own Ruby wrapper &lt;code&gt;rtasklib&lt;&#x2F;code&gt; and started working on the JSON to domain object marshalling and vice versa. I realized that I was reinventing the wheel a bit with the domain objects and to some extent with the data type coercions (though obviously some custom coercions will be necessary).&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>task_time update March 1st</title>
        <published>2015-03-02T02:16:00+00:00</published>
        <updated>2015-03-02T02:16:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://will-paul.com/wwwdotcomslash/posts/task-time-update-march-1st/"/>
        <id>https://will-paul.com/wwwdotcomslash/posts/task-time-update-march-1st/</id>
        
        <summary type="html">&lt;p&gt;&lt;a href=&quot;&#x2F;2015&#x2F;02&#x2F;22&#x2F;a-comparison-of-task-warrior-wrappers.html.markdown&quot;&gt;Last week&lt;&#x2F;a&gt; I talked about picking an appropriate TaskWarrior wrapper for my &lt;code&gt;task_time&lt;&#x2F;code&gt; project. A rundown of the options are &lt;code&gt;taskw&lt;&#x2F;code&gt; (Python, GPL, low on documentation, durations not implemented yet), &lt;code&gt;tasklib&lt;&#x2F;code&gt; (Python, BSD, good documentation, durations not implemented, does not read in users &lt;code&gt;.taskrc&lt;&#x2F;code&gt;), and &lt;code&gt;taskwarrior&lt;&#x2F;code&gt; (Ruby, MIT, just does JSON marshalling&#x2F;unmarshalling). In the end I decided none of these were actually going to cut it, since none implemented duration features, so my choices were to either Fork and implement durations and whatever other features were needed or to roll my own. In the end I really would rather use Ruby for this so I decided that it would be good to write the wrapper from scratch, while taking cues from each of the other implementations. I named the repo &lt;code&gt;rtasklib&lt;&#x2F;code&gt; in following with the ruby convention of naming wrappers with lib and either a leading &lt;code&gt;r&lt;&#x2F;code&gt; or trailing &lt;code&gt;_ruby&lt;&#x2F;code&gt; (dashes imply a subclass and are only used when your&#x27;re gem extends an existing gem not an external program). You can find the repo at &lt;a href=&quot;http:&#x2F;&#x2F;github.com&#x2F;dropofwill&#x2F;rtasklib&quot;&gt;&lt;code&gt;dropofwill&#x2F;rtasklib&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; and the &lt;code&gt;task_time&lt;&#x2F;code&gt; repo at &lt;a href=&quot;http:&#x2F;&#x2F;github.com&#x2F;dropofwill&#x2F;task_time&quot;&gt;dropofwill&#x2F;task_time&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>A Comparison of Task Warrior Wrappers</title>
        <published>2015-02-22T20:54:00+00:00</published>
        <updated>2015-02-22T20:54:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://will-paul.com/wwwdotcomslash/posts/a-comparison-of-task-warrior-wrappers/"/>
        <id>https://will-paul.com/wwwdotcomslash/posts/a-comparison-of-task-warrior-wrappers/</id>
        
        <summary type="html">&lt;p&gt;So as it turns out there were 3 main libraries written to interact with the TaskWarrior database (I think there is also a Perl and maybe a PHP wrapper as well, but I couldn&#x27;t find them again and let&#x27;s face it: I&#x27;m not interested in using either of those languages anyways).&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Taskwarrior timesheet plugin plan</title>
        <published>2015-02-16T19:36:00+00:00</published>
        <updated>2015-02-16T19:36:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://will-paul.com/wwwdotcomslash/posts/taskwarrior-timesheet-plugin-plan/"/>
        <id>https://will-paul.com/wwwdotcomslash/posts/taskwarrior-timesheet-plugin-plan/</id>
        
        <summary type="html">&lt;p&gt;This is a plan for a project that will act as a plugin for the application Taskwarrior that allows the users to use &lt;code&gt;task&lt;&#x2F;code&gt; to keep track of their time involved with tasks. I chose task_time as the name because the original program is run with the &lt;code&gt;task&lt;&#x2F;code&gt; command and in Ruby underscores are used to denote spaces (dashes imply some sort of class hierarchy).&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Writing Command Line Tools with Ruby</title>
        <published>2015-02-13T17:16:00+00:00</published>
        <updated>2015-02-13T17:16:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://will-paul.com/wwwdotcomslash/posts/commnad-line-tools-with-ruby/"/>
        <id>https://will-paul.com/wwwdotcomslash/posts/commnad-line-tools-with-ruby/</id>
        
        <summary type="html">&lt;p&gt;I&#x27;ve written a lot of Ruby code over the years from web applications, to rack frameworks, to rake tasks, even packaged a few up as gems, but one thing I&#x27;ve never done is write a command line tool directly in ruby. This post just sums up my initial foray into making Ruby cli tools, as usual with Ruby it&#x27;s not nearly as hard as it sounds.&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Blink project: Hacking on an Arduino</title>
        <published>2015-02-11T02:35:00+00:00</published>
        <updated>2015-02-11T02:35:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://will-paul.com/wwwdotcomslash/posts/blink-project-hacking-on-an-arduino/"/>
        <id>https://will-paul.com/wwwdotcomslash/posts/blink-project-hacking-on-an-arduino/</id>
        
        <summary type="html">&lt;p&gt;For my Physical Computing &amp;amp; Alt Interfaces class we had to use an Arduino (I have the latest Uno) to control LED(s) in a non-trivial way. I knew I wanted to make some kind of LED matrix, but didn&#x27;t know how big of one I could make on my half sized breadboard and limited number of pins. What I ended up with was a 16 LED (4x4) matrix controlled by just 8 pins, each of which can be individually controlled.&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Initial thoughts for an MPD project</title>
        <published>2015-02-05T21:30:00+00:00</published>
        <updated>2015-02-05T21:30:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://will-paul.com/wwwdotcomslash/posts/source-code-review-of-mpd-and-mpd-wrappers/"/>
        <id>https://will-paul.com/wwwdotcomslash/posts/source-code-review-of-mpd-and-mpd-wrappers/</id>
        
        <summary type="html">&lt;p&gt;For my Software Development in Linux class we are making one large project over the course of the class and then packaging it up for distribution at the end (probably Debian, RPM, and AUR).  This is a little bit of a paradigm shift for me personally, as for most of my projects distribution means pushing to a Heroku instance, so I&#x27;ve had to brain storm some new non-web-based projects. I&#x27;ve come up with two basic trains of thought either a better time-tracking&#x2F;Freshbooks integration for taskwarrior (the current ones are all bare-bones) or any number of music&#x2F;analytics ideas for the music players, specifically MPD.&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Geocoding my Last.fm Data</title>
        <published>2014-12-17T01:15:00+00:00</published>
        <updated>2014-12-17T01:15:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://will-paul.com/wwwdotcomslash/posts/geocoding-my-lastfm-data/"/>
        <id>https://will-paul.com/wwwdotcomslash/posts/geocoding-my-lastfm-data/</id>
        
        <summary type="html">&lt;p&gt;One question that often comes to my mind is how does geographical location (and the culture that comes with it) influence the band’s music and therefore my taste as well. So that’s why I decided to use this data to create a cartogram of my listening data.&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>C-Graph: A new tool to grok C-source code</title>
        <published>2014-12-15T01:43:00+00:00</published>
        <updated>2014-12-15T01:43:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://will-paul.com/wwwdotcomslash/posts/c-graph-a-new-tool-to-grok-c-source-code/"/>
        <id>https://will-paul.com/wwwdotcomslash/posts/c-graph-a-new-tool-to-grok-c-source-code/</id>
        
        <summary type="html">&lt;p&gt;A joint post by &lt;a href=&quot;http:&#x2F;&#x2F;brendan-w.com&#x2F;&quot;&gt;Brendan Whitfield&lt;&#x2F;a&gt; &amp;amp; Will Paul&lt;&#x2F;p&gt;
&lt;p&gt;Source code is often the most up to date documentation available, but while code is written in a linear fashion, the execution is a network of calls that often jump across files. Known as a function call graph, this data can help programmers quickly grasp the structure of a program. How can  we use visualization to make the process of grokking source code easier?&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Setting up a nice UNIX Ruby dev env</title>
        <published>2014-12-10T06:05:00+00:00</published>
        <updated>2014-12-10T06:05:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://will-paul.com/wwwdotcomslash/posts/setting-up-a-nice-unix-ruby-dev-env/"/>
        <id>https://will-paul.com/wwwdotcomslash/posts/setting-up-a-nice-unix-ruby-dev-env/</id>
        
        <summary type="html">&lt;p&gt;Setting up a Ruby environment is deceptively simple. Easy to do, hard to maintain. The two major players, RVM and rbenv, offer more than the typical user needs or can possibly understand. Here I walk you through my setup using tools that do one thing and do it well. Coincidently all these tools that I use were written by the same guy&#x2F;girl who goes by the handle Postmodern.&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Sankey diagram of rule distributions for word sense disambiguation</title>
        <published>2014-11-15T06:14:00+00:00</published>
        <updated>2014-11-15T06:14:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://will-paul.com/wwwdotcomslash/posts/sankey-diagram-of-rule-distributions-for-word-sense-disambiguation/"/>
        <id>https://will-paul.com/wwwdotcomslash/posts/sankey-diagram-of-rule-distributions-for-word-sense-disambiguation/</id>
        
        <summary type="html">&lt;p&gt;Crazy long title, I know, but it&#x27;s not as complicated as it sounds. For my Natural Language Processing class we recently approached the problem of Word Sense Disambiguation from a Machine Learning perspective (we also looked at others, including lookup approaches like Lesk), using the simple, but effective, decision list algorithm. This is my attempt at visualizing the results.&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>My Vim Config Part 2: Shortcut Keys</title>
        <published>2014-11-15T04:53:00+00:00</published>
        <updated>2014-11-15T04:53:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://will-paul.com/wwwdotcomslash/posts/my-vim-config-part-2-shortcut-keys/"/>
        <id>https://will-paul.com/wwwdotcomslash/posts/my-vim-config-part-2-shortcut-keys/</id>
        
        <summary type="html">&lt;p&gt;This is a continuation of my short series (&lt;a href=&quot;&#x2F;2014&#x2F;11&#x2F;02&#x2F;my-vim-config-part-1-the-basics&#x2F;&quot;&gt;part 1&lt;&#x2F;a&gt;) on how I setup Vim to be a little more fully featured looking at the custom shortcuts. By no means is my setup the best, but there are a few neat things I&#x27;ve stumbled upon and my thought is that by aggregating them here someone else might find something new to add. Or maybe someone knows a better way to do something and lets me know. So let&#x27;s get started!&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>My Vim Config Part 1: The Basics</title>
        <published>2014-11-02T03:23:00+00:00</published>
        <updated>2014-11-02T03:23:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://will-paul.com/wwwdotcomslash/posts/my-vim-config-part-1-the-basics/"/>
        <id>https://will-paul.com/wwwdotcomslash/posts/my-vim-config-part-1-the-basics/</id>
        
        <summary type="html">&lt;p&gt;As someone that came to Vim from Sublime Text (through the excellent Vi-ntage mode), one thing that held me back was just how annoying the default Vim settings are. In a way looking back at it that wasn&#x27;t a bad thing, it let me really craft my own configuration that I&#x27;m pretty happy with, but always looking for ways to improve. In order to help someone else a who is headed down that path find a config that works for them a little quicker.&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Word Sense Disambiguation with Python</title>
        <published>2014-10-13T01:48:00+00:00</published>
        <updated>2014-10-13T01:48:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://will-paul.com/wwwdotcomslash/posts/word-sense-disambiguation-with-python/"/>
        <id>https://will-paul.com/wwwdotcomslash/posts/word-sense-disambiguation-with-python/</id>
        
        <summary type="html">&lt;p&gt;One of the first things you realize when working with any sort of linguistic data is just how ambiguous just about anything we say or write really is. From the smallest units of sound (what was that garbled bit of sound?) to the document unit of meaning (what was that article about?), there aren&#x27;t many parts of language that we can be 100% sure of even as native speakers, much less as an outside observer, like our programs.&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Creating and Deploying a Middleman Blog, Part 3: Deployment</title>
        <published>2014-09-29T02:04:00+00:00</published>
        <updated>2014-09-29T02:04:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://will-paul.com/wwwdotcomslash/posts/creating-and-deploying-a-middleman-blog-part-3-deployment/"/>
        <id>https://will-paul.com/wwwdotcomslash/posts/creating-and-deploying-a-middleman-blog-part-3-deployment/</id>
        
        <summary type="html">&lt;p&gt;&lt;a href=&quot;&#x2F;2014&#x2F;09&#x2F;14&#x2F;creating-and-deploying-a-middleman-blog-part-1-what-s-middleman&#x2F;&quot;&gt;Two posts ago&lt;&#x2F;a&gt; I talked about static site generators in general and Middleman specifically. &lt;a href=&quot;&#x2F;2014&#x2F;09&#x2F;22&#x2F;creating-and-deploying-a-middleman-blog-part-2-blogging-with-middleman&#x2F;&quot;&gt;After that&lt;&#x2F;a&gt; I talked about how to use Middleman for blogging and again talked about different use cases. Today I am going to talk about deployment options and how you can get your site onto the web.&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Bugfix: FooTable</title>
        <published>2014-09-24T05:43:00+00:00</published>
        <updated>2014-09-24T05:43:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://will-paul.com/wwwdotcomslash/posts/bugfix-footable/"/>
        <id>https://will-paul.com/wwwdotcomslash/posts/bugfix-footable/</id>
        
        <summary type="html">&lt;p&gt;Everyone in the frontend community likes to hate on tables, it&#x27;s like Comic Sans in the design community. And this is for mostly good reasons, tables for layouts are pretty much unnecessary in this day in age (unless you&#x27;re looking to center something vertically, &lt;a href=&quot;http:&#x2F;&#x2F;css-tricks.com&#x2F;centering-in-the-unknown&#x2F;&quot;&gt;then &lt;em&gt;maybe&lt;&#x2F;em&gt; you can use it in your CSS, not the markup&lt;&#x2F;a&gt;{:target=&quot;_blank&quot;}), but there are still actually legitimate uses of tables. You know like for tabular data.&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Creating and Deploying a Middleman Blog, Part 2: Blogging with Middleman</title>
        <published>2014-09-22T02:06:00+00:00</published>
        <updated>2014-09-22T02:06:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://will-paul.com/wwwdotcomslash/posts/creating-and-deploying-a-middleman-blog-part-2-blogging-with-middleman/"/>
        <id>https://will-paul.com/wwwdotcomslash/posts/creating-and-deploying-a-middleman-blog-part-2-blogging-with-middleman/</id>
        
        <summary type="html">&lt;p&gt;&lt;a href=&quot;&#x2F;2014&#x2F;09&#x2F;14&#x2F;creating-and-deploying-a-middleman-blog-part-1-what-s-middleman&#x2F;&quot;&gt;Last time&lt;&#x2F;a&gt; I talked about static site generators in general (why you would use them) and a little bit about Middleman specifically (why you would use it in particular). Today I am going to talk about Middleman&#x27;s blogging capabilities.&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Creating and Deploying a Middleman Blog, Part 1: What&#x27;s Middleman?</title>
        <published>2014-09-14T22:07:00+00:00</published>
        <updated>2014-09-14T22:07:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://will-paul.com/wwwdotcomslash/posts/creating-and-deploying-a-middleman-blog-part-1-what-s-middleman/"/>
        <id>https://will-paul.com/wwwdotcomslash/posts/creating-and-deploying-a-middleman-blog-part-1-what-s-middleman/</id>
        
        <summary type="html">&lt;p&gt;This is the first in what will probably be a three part series on creating and deploying a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;middleman&#x2F;middleman&quot;&gt;Middleman&lt;&#x2F;a&gt;{:target=&quot;_blank&quot;} site, specifically a blog deployed to a &lt;a href=&quot;https:&#x2F;&#x2F;devcenter.heroku.com&#x2F;start&quot;&gt;Heroku&lt;&#x2F;a&gt;{:target=&quot;_blank&quot;} instance.&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Run Processing Sketches from Vim</title>
        <published>2014-09-08T03:09:00+00:00</published>
        <updated>2014-09-08T03:09:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://will-paul.com/wwwdotcomslash/posts/run-processing-sketches-from-vim/"/>
        <id>https://will-paul.com/wwwdotcomslash/posts/run-processing-sketches-from-vim/</id>
        
        <summary type="html">&lt;p&gt;So I started writing Processing for one of my classes (Interactive Media Development) and unfortunately the default development workflow they want us to use is tightly bound to the IDE that it ships with. In general I&#x27;m not a huge fan of IDEs anyways, but the Processing one is especially terrible. It&#x27;s obviously been designed to abstract away programming concepts to make the barrier to entry really low (I think it was originally made to help artist make procedural art), but in the end this makes for an annoying experience for those of us with a bit of experience.&lt;&#x2F;p&gt;
</summary>
        
    </entry>
</feed>
