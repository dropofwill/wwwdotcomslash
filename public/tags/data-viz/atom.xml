<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title> - Data Viz</title>
    <link rel="self" type="application/atom+xml" href="https://will-paul.com/wwwdotcomslash/tags/data-viz/atom.xml"/>
    <link rel="alternate" type="text/html" href="https://will-paul.com/wwwdotcomslash"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2014-12-17T01:15:00+00:00</updated>
    <id>https://will-paul.com/wwwdotcomslash/tags/data-viz/atom.xml</id>
    <entry xml:lang="en">
        <title>Geocoding my Last.fm Data</title>
        <published>2014-12-17T01:15:00+00:00</published>
        <updated>2014-12-17T01:15:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://will-paul.com/wwwdotcomslash/posts/geocoding-my-lastfm-data/"/>
        <id>https://will-paul.com/wwwdotcomslash/posts/geocoding-my-lastfm-data/</id>
        
        <summary type="html">&lt;p&gt;One question that often comes to my mind is how does geographical location (and the culture that comes with it) influence the band’s music and therefore my taste as well. So that’s why I decided to use this data to create a cartogram of my listening data.&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>C-Graph: A new tool to grok C-source code</title>
        <published>2014-12-15T01:43:00+00:00</published>
        <updated>2014-12-15T01:43:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://will-paul.com/wwwdotcomslash/posts/c-graph-a-new-tool-to-grok-c-source-code/"/>
        <id>https://will-paul.com/wwwdotcomslash/posts/c-graph-a-new-tool-to-grok-c-source-code/</id>
        
        <summary type="html">&lt;p&gt;A joint post by &lt;a href=&quot;http:&#x2F;&#x2F;brendan-w.com&#x2F;&quot;&gt;Brendan Whitfield&lt;&#x2F;a&gt; &amp;amp; Will Paul&lt;&#x2F;p&gt;
&lt;p&gt;Source code is often the most up to date documentation available, but while code is written in a linear fashion, the execution is a network of calls that often jump across files. Known as a function call graph, this data can help programmers quickly grasp the structure of a program. How can  we use visualization to make the process of grokking source code easier?&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Sankey diagram of rule distributions for word sense disambiguation</title>
        <published>2014-11-15T06:14:00+00:00</published>
        <updated>2014-11-15T06:14:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://will-paul.com/wwwdotcomslash/posts/sankey-diagram-of-rule-distributions-for-word-sense-disambiguation/"/>
        <id>https://will-paul.com/wwwdotcomslash/posts/sankey-diagram-of-rule-distributions-for-word-sense-disambiguation/</id>
        
        <summary type="html">&lt;p&gt;Crazy long title, I know, but it&#x27;s not as complicated as it sounds. For my Natural Language Processing class we recently approached the problem of Word Sense Disambiguation from a Machine Learning perspective (we also looked at others, including lookup approaches like Lesk), using the simple, but effective, decision list algorithm. This is my attempt at visualizing the results.&lt;&#x2F;p&gt;
</summary>
        
    </entry>
</feed>
